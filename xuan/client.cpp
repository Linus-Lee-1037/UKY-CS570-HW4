/*
 * This  code modified from sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */
#include <iostream>
#include <stdio.h>
#include <cstring>
#include <unistd.h>
#include <pwd.h>
#include <rpc/rpc.h>
#include "ssnfs.h"

CLIENT *clnt;

void ssnfsprog_1(char *host){
    clnt = clnt_create(host, SSNFSPROG, SSNFSVER, "udp");
    if(clnt == nullptr){
        clnt_pcreateerror(host);
        exit(1);
    }
}

int Open(const char *filename_to_open){
    open_output *outp;
    open_input open_file_1_arg;
    strcpy(open_file_1_arg.user_name, getpwuid(getuid())->pw_name);
    strcpy(open_file_1_arg.file_name, filename_to_open);
    outp = open_file_1(&open_file_1_arg, clnt);
    if(outp == nullptr){
        clnt_perror(clnt, "Open: call failed");
    }
    std::cout << outp->out_msg.out_msg_val << std::endl;
    std::cout << "File descripter retuned is " << outp->fd << std::endl;
    return outp->fd;
}

void Close(int fd){
    close_output *outp;
    close_input close_file_1_arg;
    strcpy(close_file_1_arg.user_name, getpwuid(getuid())->pw_name);
    close_file_1_arg.fd = fd;
    outp = close_file_1(&close_file_1_arg, clnt);
    if(outp == nullptr){
        clnt_perror(clnt, "Close: call failed");
    }
    std::cout << outp->out_msg.out_msg_val << std::endl;
}

void Delete(const char *filename_to_delete){
    delete_output *outp;
    delete_input delete_file_1_arg;
    strcpy(delete_file_1_arg.user_name, getpwuid(getuid())->pw_name);
    strcpy(delete_file_1_arg.file_name, filename_to_delete);
    outp = delete_file_1(&delete_file_1_arg, clnt);
    if(outp == nullptr){
        clnt_perror(clnt, "Delete: call failed");
    }
    std::cout << outp->out_msg.out_msg_val << std::endl;
}

void List(){
    list_output *outp;
    list_input list_files_1_arg;
    strcpy(list_files_1_arg.user_name, getpwuid(getuid())->pw_name);
    outp = list_files_1(&list_files_1_arg, clnt);
    if(outp == nullptr){
        clnt_perror(clnt, "List: call failed");
    }
    std::cout << outp->out_msg.out_msg_val << std::endl;
}

void Seek(int fd, int pos){
    seek_output *outp;
    seek_input seek_position_1_arg;
    strcpy(seek_position_1_arg.user_name, getpwuid(getuid())->pw_name);
    seek_position_1_arg.fd = fd;
    seek_position_1_arg.position = pos;
    outp = seek_position_1(&seek_position_1_arg, clnt);
    if(outp == nullptr){
        clnt_perror(clnt, "Seek: call failed");
    }
    std::cout << outp->out_msg.out_msg_val << std::endl;
}

void Read(int fd, char *buffer, int numbytes){
    read_output *outp;
    read_input read_file_1_arg;
    strcpy(read_file_1_arg.user_name, getpwuid(getuid())->pw_name);
    read_file_1_arg.fd = fd;
    read_file_1_arg.numbytes = numbytes;
    outp = read_file_1(&read_file_1_arg, clnt);
    if(outp == nullptr){
        clnt_perror(clnt, "Read: call failed");
    }
    if(!outp->success){
        std::cout << outp->out_msg.out_msg_val << std::endl;
    }else{
        memcpy(buffer, outp->buffer.buffer_val, numbytes);
        buffer[numbytes] = '\0';
    }
}

void Write(int fd, char *buffer, int numbytes){
    write_output *outp;
    write_input write_file_1_arg;
    strcpy(write_file_1_arg.user_name, getpwuid(getuid())->pw_name);
    write_file_1_arg.fd = fd;
    write_file_1_arg.numbytes = numbytes;
    write_file_1_arg.buffer.buffer_len = numbytes + 1;
    memcpy(write_file_1_arg.buffer.buffer_val, buffer, numbytes);
    outp = write_file_1(&write_file_1_arg, clnt);
    if(outp == nullptr){
        clnt_perror(clnt, "Write: call failed");
    }
    std::cout << outp->out_msg.out_msg_val << std::endl;
}

int main(int argc, char *argv[]){

    if(argc < 2){
        std::cout << "usage: " << argv[0] << " <server_host>" << std::endl;
        exit(1);
    }

    ssnfsprog_1(argv[1]);

    int i,j;
    int fd1, fd2;
    char buffer[100];
    fd1 = Open("File1");
    char message[] = "This is a test program for cs570 assignment 4";
    for(i=0; i<20;i++){
        Write(fd1, message, 15);
    }
    Close(fd1);
    fd2=Open("File1");
    for(j=0; j<20; j++){
        Read(fd2, buffer, 10);
        printf("%s\n",buffer);
    }
    Seek(fd2,40);
    Read(fd2, buffer, 20);
    printf("%s\n",buffer);
    Close(fd2);
    Delete("File1");
}
